# `fold`s can in some cases tolerate missing fields.  For example, this is a
# valid `fold`:
#
#     fold{ succ x: x }
#
# … which elaborates to:
#
#     fold{ succ x: x, zero: null } : forall (a : Type) . Natural -> Optional a
#
# … but you cannot do it the other way around (keep `zero` and omit the `succ`),
# because it is not a valid `fold` no matter how you interpret it.  If you
# attempt to interpret it as a `fold` for `Natural` numbers the expression is
# elaborated to:
#
#     fold{ succ: null, zero: 0 }
#
# … which doesn't work because the `succ` handler needs to be a function (and
# `null` is not a function).  However, it also doesn't work if you fall back to
# treating it as a fold for a union, because a fold for a union requires all
# handlers to be functions (and `0` is not a function).
#
# The error message that you get if neither `fold` succeeds is the error message
# for unions.
fold{ zero: 0 }
